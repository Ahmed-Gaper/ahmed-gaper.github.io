
[{"content":"Software Engineer passionate about backend development and open source contribution. I enjoy building real-world projects and understanding how things work behind the scenes - from system architecture to low-level implementation details.\n","date":"9 October 2025","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"","date":"9 October 2025","externalUrl":null,"permalink":"/blog/","section":"Blogs","summary":"","title":"Blogs","type":"blog"},{"content":"\rA Win-Win Situation #\rI was a second-year CS student who spent most of my time on problem-solving, CS courses, and console projects. One day, a friend told me about GSoC and shared this golden article: Why Google Summer of Code is a golden Opportunity. A line in that article caught my eye: Win Win situation.\nI asked myself, \u0026ldquo;Am I ready for this step?\u0026rdquo; The answer was a Win Win situation. As a beginner, I wanted to level up in topics I already knew, learn new subjects, improve my Git and GitHub skills, and discover what open source really is. I realized that even if I didn’t get accepted, I would still achieve all of that. And if I did get accepted? The thought was incredible.\nIn Short, What Is GSoC #\rfor more details, check the resources\nGoogle Summer of Code is a program run by Google that helps bring new developers into the world of open-source software.\nThink of it as a paid, remote internship for students. Open-source organizations, which are projects built by volunteers and freely available to everyone, propose a list of programming tasks they need help with. Students then apply for a specific task by writing a project proposal. A proposal is a document that explains how you will implement the project.\nIf a student is selected, they spend their summer (about three months) working on that project under the guidance of mentors from the organization. The mentors provide help and feedback, making it a great learning experience. In return for successfully completing their project, the student receives a stipend from Google. It\u0026rsquo;s a way for students to gain real-world experience, get paid, and contribute to software that people all over the world use.\nSo, you find an organization and a project from the ones that want to participate in GSoC, and then you submit a proposal explaining how you will implement it.\nThe Leap After Acceptance #\rBeing accepted feels like a leap into the future. For about three months in the summer, you work on a real-world project with a mentor guiding you. The experience of seeing how a professional team and an organization’s workflow operate will push your software career to a new level. And when you learn about the stipend, your eyes will light up.\nThe Starting Point #\rAt the beginning of my journey, I opened the GSoC page to explore projects, looking for one whose tools I had used or that simply caught my interest. But with my beginner\u0026rsquo;s level of experience, a question haunted me: \u0026ldquo;With my current skills, am I actually capable of this?\u0026rdquo;\n\u0026ldquo;You are able to do anything if you want.\u0026rdquo;\nThis is a quote I heard from someone who was accepted into a major GSoC organization. He said he didn\u0026rsquo;t understand anything at first, but he did it anyway. Motivated by this, I kept going through moments of both excitement and disappointment, exploring organizations and searching for my first pull request.\nYour Unexpected Teacher #\rSpending hours searching for the right organization or a beginner-friendly issue can feel boring and disappointing. It\u0026rsquo;s easy to feel like you\u0026rsquo;re wasting time while others are learning new technologies. But you don\u0026rsquo;t see your own progress.\nDuring this time, many of my skills improved almost without me realizing it, simply through persistent searching. I developed the ability to read open-source code, revisited concepts I had studied before, and understood them more deeply by seeing how they are applied in real-world projects. I also gained a stronger grasp of Git and GitHub workflows on a deeper level. All of this naturally enhanced my programming skills. The key is to just keep going.\nYour Friends #\rOf course, a real friend sharing this journey with you is crucial. Even if you are at the same level, a strong partnership makes all the difference. With a shared goal and high motivation, you are unlikely to feel down at the same time, so you can pull each other up. Understanding something motivates the other, and a merged PR becomes a shared victory.\nAnd AI tools can help you fly. They can help you understand complex code, search for information, and find what fits you. But be careful, as they can sometimes make you feel lost. Tools like DeepWiki, which lets you \u0026ldquo;talk\u0026rdquo; to GitHub repositories, and Gitingest, which turns a repository into text for LLMs, can be very useful.\nACU (Active Course University) #\rACU is a programming-focused Discord channel that became like a second home for me. It\u0026rsquo;s not only for GSoC but for your entire software development journey. Here, you find answers to any question from people who have been there before and genuinely want to help, asking for nothing in return. ACU is an amazing place that truly makes a difference.\nHow to Choose Your Organization #\rWhat no one will tell you about how to search\nAt the beginning, the real obstacle for many is not technical skill but research and exploration. No one can tell you exactly what to search for because your journey is unique. Most GSoC contributors find an organization through their own focused exploration.\nThe key is knowing how to search effectively. Learn to use tools like:\ngsocorganizations.dev. GitHub with its filters (by language, topic, \u0026ldquo;good-first-issue\u0026rdquo;). Your search should be guided by your personal goals. Understand the trade-offs of each approach, as your strategy will define your experience.\n1. The Technology-First Approach\n\u0026ldquo;I\u0026rsquo;ll only contribute to orgs using technologies I already know.\u0026rdquo;\nPro: You\u0026rsquo;ll be a strong contributor from day one and understand the code faster. Con: You narrow your options and might miss projects with ideas you love because of a tech mismatch. 2. The Project-First Approach\n\u0026ldquo;I\u0026rsquo;ll search for a project regardless of technology to increase options.\u0026rdquo;\nPro: You open yourself up to many more organizations and inspiring ideas. Con: The load of learning a new technology while contributing is significant and challenging. 3. The Prestige-First Approach\n\u0026ldquo;I want to contribute to a famous organization like Chromium or Fedora.\u0026rdquo;\nPro: A big name looks great on your resume and offers a high-impact experience. Con: You will face intense competition from many other applicants. 4. The GSoC-First Approach\n\u0026ldquo;My primary goal is to get into GSoC, regardless of the organization.\u0026rdquo;\nPro: You cast the widest net and increase your chances of acceptance. Con: The organization\u0026rsquo;s name might carry less weight on your CV later. 5. The Career-First Approach\n\u0026ldquo;I\u0026rsquo;m looking for organizations known to hire contributors after GSoC.\u0026rdquo;\nNote: Your stipend comes from Google, not the organization. You are searching for orgs that offer strong career opportunities post-GSoC. There are more paths than these. Set a clear goal for what you want from GSoC. Each part of your goal will shape your search, and only you can weigh the trade-offs that fit your situation.\nThe Power of Documentation \u0026amp; Your First PR #\rDon\u0026rsquo;t ask before you read the documentation\nYour most valuable mentor for any organization is its documentation. The documentation will tell you everything: if the org is a good fit, how to get started, and where to find answers.\nWhen you\u0026rsquo;re new to an open-source project, even \u0026ldquo;beginner-friendly\u0026rdquo; issues can seem confusing. You might not know how to solve the issue or even how to submit a Pull Request (PR).\nThis is where the power of documentation shines. Before you ask a question in the chat, search the documentation. The answer is almost always there. This shows the community you are resourceful and respectful of their time.\nAnnouncing Your Arrival #\rEveryone who keeps going eventually reaches this point\nA merged PR gives a great feeling of achievement: “Finally, I’m here!” After that, read the org’s GSoC project ideas and pick one to propose.\nFrom this moment on, your goal is to show the organization that you are a committed, valuable member. How?\nBe Active: Join their communication channels (Slack, Discord, etc.). Answer other newcomers\u0026rsquo; questions (you\u0026rsquo;ll know the answers from your time with the docs!). Be Present: Attend community meetings and introduce yourself to potential mentors. Be Consistent: Continue contributing with more PRs and issue reports. Act like you belong, and soon, everyone else will see it too. When the mentors review proposals, they will already know your name and trust your work.\nHelpful Resources #\rEssential:\nStart with the article that inspired me, Why Google Summer of Code is a golden Opportunity. For a step-by-step walkthrough of the entire process, this video Let\u0026rsquo;s apply to Google Summer of Code is incredibly helpful. Optional Guides:\nGit and GitHub | شخبط وانت متطمن Git \u0026amp; GitHub Tutorial for Beginners Contributing to an Open Source Project on GitHub ( use pluralsight\u0026rsquo;s free trial). Open Source and GSoC 2024 Informational Session Google Summer of Code | A COMPLETE GUIDE ","date":"9 October 2025","externalUrl":null,"permalink":"/blog/my-gsoc-win/","section":"Blogs","summary":"A story-like recap of my GSoC journey, encouraging anyone to take on the experience (or retry it), without rehashing the application process details that are already covered elsewhere. I\u0026rsquo;ve gathered every source and tool that helped me, starting from the very basics of what GSoC is, focusing on the things I didn\u0026rsquo;t find in other resources.","title":"My GSoC Win","type":"blog"},{"content":"\rWhat is Accord Project \u0026amp; Concerto? #\rThe Accord Project (a Linux Foundation project) is an open ecosystem transforming human-readable legal text to machine-readable and machine-executable, Enabling anyone to build smart agreements and documents on a technology neutral platform.\nAccord uses Concerto, a simple, human-friendly modeling language that connects contract writing (legal text) with code that can run and enforce it.\nIn practice, a smart legal contract maps natural-language clauses and sections to typed, machine-readable components. Concerto models serve as those data schemas - defining concept and other types that the contract’s executable logic reads and updates (Think of concept as similar to a class in programming.)\nAs example\nconcept Person {\ro String firstName\ro String lastName\ro DateTime dateOfBirth\r} This model defines a Person type with structured, typed properties, enabling robust data validation and code generation.\nWhy a Concerto Linter is Essential #\rInstead of relying on manual reviews or ad-hoc checks, teams can run the linter automatically during development so problems are caught early, Like how ESLint validates JS code, Concerto’s domain specific language requires a dedicated linter that understands its AST and metamodel to ensure models follow best practices and team rules.\nSo the Concerto Linter was developed to automate model validation and best practices, Ensure Concerto model language is Complete and have all the features needed to match top modeling languages globally\nArchitectural Foundation #\rI designed the accordproject/concerto-linter as a modular, standalone package decoupled from concerto-core, following the separation-of-concerns pattern (similar to TypeScript’s core compiler and ESLint). And this give flexibility to add, remove, or edit rules without modifying the core library.\nHow It Works: AST-Based Analysis #\rThe Concerto Linter operates by analyzing the language\u0026rsquo;s JSON Abstract Syntax Tree (AST) of the model. It is built on the Spectral framework.\nThis approach saves development time because Spectral operates directly on our JSON Abstract Syntax Tree (AST). In contrast, traditional linters work on source code, so building a custom linter for Concerto from scratch would require significantly more effort.\nIn this setup, Spectral\u0026rsquo;s configuration file serves as the brain of the linter, defining which rules to run and their parameters, while the rule functions act as the muscle that performs the checks. We leveraged both Spectral\u0026rsquo;s built-in functions and implemented custom ones for our project-specific logic.\nThe workflow is as follows:\nThe linter receives the JSON AST of the model. It reads the configuration file to load the rule settings. It executes the enabled rules against the AST. Targeting the AST: Each rule uses JSONPath queries to select specific nodes. For example, the query $.declarations[*].properties[*].name selects all property names within declarations. The linter calls the corresponding built-in or custom function for each selected node. Finally, it outputs errors or warnings for any violations, with their severity levels determined by the configuration. Default Ruleset | Fully Configurable #\rOne of the most challenging parts of this project was defining a sensible default ruleset for the linter. We iteratively searched for, ran, and tested rules against many real-world Concerto modules to identify patterns that actually cause problems in practice, not just a long list of noisy checks. The result is a compact, practical default ruleset published as the @accordproject/concerto-linter-default-ruleset sub-package of @accordproject/concerto-linter.\nBelow is the default ruleset included in that package:\nRule Description namespace-version Requires a version number in the model namespace declaration. Enforces semantic-versioning style in namespaces to improve clarity and compatibility. no-reserved-keywords Prevents use of language-reserved keywords for declarations, properties, and decorators to avoid conflicts and unexpected behaviour. pascal-case-declarations Enforces PascalCase for declaration names (scalar, enum, concept, asset, participant, transaction, event), improving consistency and readability. camel-case-properties Enforces camelCase for property names of common scalar types (String, Double, Integer, Long, DateTime, Boolean) for consistent property naming. upper-snake-case-enum-constants Enforces UPPER_SNAKE_CASE for enum constants to keep enum naming consistent and obvious. pascal-case-decorators Enforces PascalCase for decorator names for consistency with declaration naming. string-length-validator Requires string properties to include a length validator where appropriate, preventing inconsistent/unsafe string sizes and encouraging predictable storage. no-empty-declarations Flags declarations that are empty (no properties or members), helping avoid unused or placeholder declarations in the model. abstract-must-subclassed Ensures abstract declarations have at least one concrete subclass, preventing orphaned abstract types and encouraging coherent model design. The linter\u0026rsquo;s configurability is powered by Spectral, which provides a flexible foundation for creating rulesets that align perfectly with each project\u0026rsquo;s requirements:\nExtend the default ruleset rather than editing it directly. Enable/disable individual rules for a specific project. Adjust severity (error / warning / info) per rule. Compose entirely new rulesets if your project needs stricter or looser validation. Target scope so rules apply only to particular namespaces. this flexibility ensures the concerto-linter can integrate seamlessly into any development workflow, from strictly enforcing a team\u0026rsquo;s style guide to providing gentle guidance for new users.\nFinal Deliverable #\rAt the end of the project we shipped a compact, well-structured, configurable linter for Concerto. It includes a sensible default ruleset and makes customizing rules trivial, usually just a few lines in a Spectral ruleset file. A simple CLI lets you run the linter locally or integrate it into CI so teams can quickly validate models.\nCommand-Line Interface #\rconcerto lint [options] Available Options:\nOption Description --model \u0026lt;file\u0026gt; Path to concerto model (CTO) files to lint. --exclude \u0026lt;namespace\u0026gt; One or more namespaces to exclude from lint results. Defaults include concerto.* and org.accordproject.*. -j Output results in JSON format. Default output is human-readable text. --ruleset \u0026lt;file|'default'\u0026gt; Path to a custom Spectral ruleset file, or the string 'default' to force the built-in ruleset. Example Output: Project Contributions #\rThis section lists the key PRs I contributed to deliver the concerto-linter core and its ecosystem:\nfeat: Add concert-linter package structure and naming convention rules #1027 feat(linter): Add configurable linter support #1036 feat(linter): Introduce default-ruleset package for extensibility #1038 Fix: Resolve default-ruleset Publish Failure #1039 feat: add new default ruleset #1045 feat(linter): Add string length, PascalCase decorator name rules #1054 fix(linter): add reserved-keywords rule and enhance decorator-name rule #1056 feat(linter): refactor lintModel output shape \u0026amp; add namespace filtering #1057 docs(linter): update READMEs and add unit tests for all rules #1060 feat(linter): add lint command #78 docs(concerto-linter): add docs for linter and CLI commands #83 My final submission link #\r","date":"16 September 2025","externalUrl":null,"permalink":"/blog/gsoc-25-with-accord-designing-and-building-concerto-linter/","section":"Blogs","summary":"An overview of my GSoC'25 project, written to be generic (not specific to the Accord team), covering the structural challenges, the Concerto linter’s workflow, how to build the tool, and how to design and ship a production-ready ruleset.","title":"GSoC '25 with Accord : Designing and Building Concerto Linter","type":"blog"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]